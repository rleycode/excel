#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

from business_logic import get_product_mapping, get_markup_rules, clear_cache
from database import get_db_manager

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===")
    
    db = get_db_manager()
    if db.connect():
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
        db.disconnect()
        return True
    else:
        print("‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

def test_product_categories():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ ===")
    
    try:
        categories = get_product_mapping()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        for i, (name, info) in enumerate(categories.items()):
            if i < 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  {name}: category_id={info['category_id']}, unit={info['unit']}")
        
        if len(categories) > 5:
            print(f"  ... –∏ –µ—â–µ {len(categories) - 5} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return False

def test_markup_rules():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –Ω–∞—Ü–µ–Ω–æ–∫"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –Ω–∞—Ü–µ–Ω–æ–∫ ===")
    
    try:
        markups = get_markup_rules()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∞–≤–∏–ª –Ω–∞—Ü–µ–Ω–æ–∫: {len(markups)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
        for markup in markups:
            print(f"  {markup['color']} | {markup['coating']} | {markup['region']} | +{markup['markup']}‚ÇΩ")
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Ü–µ–Ω–æ–∫: {e}")
        return False

def test_cache_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
    print("\n=== –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    
    try:
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
        print("–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î)...")
        categories1 = get_product_mapping()
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –∏–∑ –∫—ç—à–∞
        print("–í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–∏–∑ –∫—ç—à–∞)...")
        categories2 = get_product_mapping()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if categories1 == categories2:
            print("‚úì –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚úó –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è")
            return False
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à
        print("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
        clear_cache()
        
        # –¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ - —Å–Ω–æ–≤–∞ –∏–∑ –ë–î
        print("–¢—Ä–µ—Ç–∏–π –≤—ã–∑–æ–≤ (–ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞)...")
        categories3 = get_product_mapping()
        
        if categories1 == categories3:
            print("‚úì –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚úó –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...\n")
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", test_product_categories),
        ("–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞—Ü–µ–Ω–æ–∫", test_markup_rules),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_cache_functionality),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*50)
    
    passed = 0
    for test_name, result in results:
        status = "‚úì –ü–†–û–ô–î–ï–ù" if result else "‚úó –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    main()
